#!/usr/bin/python

rule pop_autosomal_het:
    input:
        bed = 'split_by_pop/{pop}_subjects.bed',
        bim = 'split_by_pop/{pop}_subjects.bim',
        fam = 'split_by_pop/{pop}_subjects.fam'
    params:
        inProj = 'split_by_pop/{pop}_subjects',
        outProj = 'autosomal_heterozygosity/{pop}_subjects_qc'
    output:
        'autosomal_heterozygosity/{pop}_subjects_qc.het'
    run:
        with open(input.fam) as f:
            line = f.readline()
        if line == 'Too few subjects to process pop\n':
            with open(output[0], 'w') as out:
                out.write('Too few subjects to process pop\n')
        else:
            shell('plink --bfile {params.inProj} --het --memory 10000 --out {params.outProj}')


rule autosomal_het_fail_list:
    input:
        'autosomal_heterozygosity/{pop}_subjects_qc.het'
    output:
        'autosomal_heterozygosity/{pop}_subjects_het_fail.txt'
    run:
        with open(input[0]) as f, open(output[0], 'w') as out:
            head = f.readline()
            if head == 'Too few subjects to process pop\n':
                out.write('Too few subjects to process pop\n')
            else:
                line = f.readline()
                while line != '':
                    line_list = line.split()
                    sub = line_list[1]
                    F = float(line_list[-1])
                    if abs(F) > float(config['autosomal_het_thresh']):
                        out.write(sub + ' ' + sub + '\n')
                    line = f.readline()

rule plink_remove_het_fail:
    input:
        bed = 'split_by_pop/{pop}_subjects.bed',
        bim = 'split_by_pop/{pop}_subjects.bim',
        fam = 'split_by_pop/{pop}_subjects.fam',
        remove = 'autosomal_heterozygosity/{pop}_subjects_het_fail.txt'
    params:
        inProj = 'split_by_pop/{pop}_subjects',
        outProj = 'final_qc_subject_level/{pop}_subjects'
    output:
        'final_qc_subject_level/{pop}_subjects.bed',
        'final_qc_subject_level/{pop}_subjects.bim',
        'final_qc_subject_level/{pop}_subjects.fam'
    run:
        with open(input.remove) as f:
            line = f.readline()
        if line == 'Too few subjects to process pop\n':
            for x in output:
                with open(x, 'w') as out:
                    out.write('Too few subjects to process pop\n')
        else:
            shell('plink --bfile {params.inProj} --remove {input.remove} --memory 10000 --make-bed --out {params.outProj}')

rule het_csv:
    input:
        het = 'autosomal_heterozygosity/{pop}_subjects_qc.het',
        SampSheet = sample_sheet
    output:
        'autosomal_heterozygosity/{pop}_subjects_qc.het.csv'
    run:
        SubjectToCaCoDict = makeSubjectToCaCoDict(sample_sheet)
        with open(input.het) as f, open(output[0], 'w') as out:
            head = f.readline()
            if head == 'Too few subjects to process pop\n':
                out.write('Too few subjects to process pop\n')
            else:
                head_list = head.split()
                out.write(','.join('Subject_ID,CaCo'.split(',') + head_list[2:]) + '\n')
                line = f.readline()
                while line != '':
                    line_list = line.split()
                    sub = line_list[1]
                    CaCo = SubjectToCaCoDict[sub]
                    out.write(','.join([sub, CaCo] + line_list[2:]) + '\n')
                    line = f.readline()

rule plot_het:
    input:
        'autosomal_heterozygosity/{pop}_subjects_qc.het.csv'
    params:
        thresh = config['autosomal_het_thresh']
    output:
        pdf = 'autosomal_heterozygosity/{pop}_subjects_qc.het.pdf'
    run:
        with open(input[0]) as f:
            line = f.readline()
        if line == 'Too few subjects to process pop\n':
            for x in output:
                with open(x, 'w') as out:
                    out.write('Too few subjects to process pop\n')
        else:
            rTxt = '''                                                                                                                                 
            colors <- c(rgb(0, 0, 1, .3), rgb(1, 0, 0, .3), rgb(0, 1, 0, .3))                                                                          
            data <- read.csv("''' + input[0] + '''")                                                                                                   
            sortData <- data[with(data, order(data$F)), ]                                                                                              
            pdf("''' + output.pdf + '''")                                                                                                              
            par(mar = c(5, 4, 4, 8) + 0.1)
            plot(1:nrow(sortData), sortData$F,                                                                                                         
            pch = 20, col = colors[data$CaCo + 1],                                                                                                     
            xlab = "subjects sorted by F", ylab = "F",
            main = "Homozygosity F Coefficient")
            abline(h = ''' + str(params.thresh) + ''')
            abline(h = -''' + str(params.thresh) + ''')
            legend("topright", inset=c(-.30,0), xpd=TRUE, legend = c("Cases", "Controls", "Unknown"), col = c("red", "blue", "green"), pch = 19)       
            par(mar = c(5, 4, 4, 2) + 0.1)                                                                                                              
            dev.off()                                                                                                                                   
            '''
