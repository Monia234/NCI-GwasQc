#!/usr/bin/python

rule make_control_list:
    input:
        fam = 'split_by_pop/{pop}_subjects.fam',
        sampSheet = sample_sheet
    output:
        'HWP/{pop}_controls.txt'
    run:
        with open(input.fam) as f:
            line = f.readline()
        if line == 'Too few subjects to process pop\n':
            with open(output[0], 'w') as out:
                out.write('Too few subjects to process pop\n')
        else:
            SubjectToCaCoDict = makeSubjectToCaCoDict(input.sampSheet)
            controls = []
            with open(input.fam) as f:
                for line in f:
                    sub = line.split()[1]
                    CaCo = SubjectToCaCoDict[sub]
                    if CaCo == '0':
                        controls.append(sub)
            if len(controls) < config['control_hwp_thresh']:
                shell('cp {input.fam} {output}')
            else:
                with open(output[0], 'w') as out:
                    for c in controls:
                        out.write(c + ' ' + c + '\n')
                    


rule subset_controls:
    input:
        bed = 'split_by_pop/{pop}_subjects.bed',
        bim = 'split_by_pop/{pop}_subjects.bim',
        fam = 'split_by_pop/{pop}_subjects.fam',
        keep = 'HWP/{pop}_controls.txt',
        related = 'remove_related/subjects_to_remove.txt'
    params:
        inProj = 'split_by_pop/{pop}_subjects',
        outProj = 'HWP/{pop}_subjects'
    output:
        'HWP/{pop}_subjects.bed',
        'HWP/{pop}_subjects.bim',
        'HWP/{pop}_subjects.fam'
    run:
        with open(input.keep) as f:
            line = f.readline()
        if line == 'Too few subjects to process pop\n':
            for x in output:
                with open(x, 'w') as out:
                    out.write('Too few subjects to process pop\n')
        else:
            shell('plink --bfile {params.inProj} --keep {input.keep} --remove {input.related} --autosome --maf 0.05 --snps-only --memory 10000 --make-bed --out {params.outProj}')

rule control_HWP:
    input:
        bed = 'HWP/{pop}_subjects.bed',
        bim = 'HWP/{pop}_subjects.bim',
        fam = 'HWP/{pop}_subjects.fam'
    params:
        inProj = 'HWP/{pop}_subjects',
        outProj = 'HWP/{pop}_subjects_qc'
    output:
        'HWP/{pop}_subjects_qc.hwe'
    run:
        with open(input.fam) as f:
            line = f.readline()
        if line == 'Too few subjects to process pop\n':
            with open(output[0], 'w') as out:
                out.write('Too few subjects to process pop\n')
        else:
            shell('plink --bfile {params.inProj} --hardy --memory 10000 --out {params.outProj}')

rule plot_HWP:
    input:
        'HWP/{pop}_subjects_qc.hwe'
    output:
        png = 'HWP/{pop}_subjects_qc.HWP.png',
        R = 'HWP/{pop}_subjects_qc.HWP.R',
        Rout = 'HWP/{pop}_subjects_qc.HWP.R.out'
    run:
        with open(input[0]) as f:
            line = f.readline()
        if line == 'Too few subjects to process pop\n':
            for x in output:
                with open(x, 'w') as out:
                    out.write('Too few subjects to process pop\n')
        else:
            rTxt = '''
data <- read.table("''' + input[0] + '''", head = T)
exp = ppoints(nrow(data))
table_r1 <- paste("total", "p<.001", "p<.05", sep = "     ")
table_r2 <- paste(nrow(data), length(data$P[data$P < 0.001]), length(data$P[data$P < 0.05]), sep = "     ")
table <- paste(table_r1, table_r2, sep = "\n")
png("''' + output.png + '''", 6.5, 6.5, "in", res = 300)
par(family='mono')
plot(exp, sort(data$P), type = "l", col = "red", xlab = "Expected P value", ylab = "Observed P value", 
main = "''' + wildcards.pop + ''' Hardy-Weinberg Proportion")
abline(0,1, col = "gray")
legend("right", table, cex=0.5, inset=.04, bty='n')
dev.off()                                                                                                                                   
'''
            with open(output.R, 'w')  as R:
                R.write(rTxt)
            shell('R --vanilla < {output.R} > {output.Rout}')
