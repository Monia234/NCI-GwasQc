#!/usr/bin/python


rule plink_ld_prune_pca:
    input:
        bed = 'final_qc_subject_level/{pop}_subjects.bed',
        bim = 'final_qc_subject_level/{pop}_subjects.bim',
        fam = 'final_qc_subject_level/{pop}_subjects.fam'
    params:
        inProj = 'final_qc_subject_level/{pop}_subjects',
        outProj = 'pca/{pop}_ldPruneList',
        r2 = ld_prune_r2,
        maf = maf_for_ibd
    output:
        'pca/{pop}_ldPruneList.prune.in',
        'pca/{pop}_ldPruneList.prune.out'
    run:
        with open(input.fam) as f:
            line = f.readline()
        if line == 'Too few subjects to process pop\n':
            for x in output:
                with open(x, 'w') as out:
                    out.write('Too few subjects to process pop\n')
        else:
            shell('plink --bfile {params.inProj} --indep-pairwise 50 5 {params.r2}  --maf {params.maf} --memory 10000 --out {params.outProj}')


rule extract_ld_prune_pca:
    input:
        bed = 'final_qc_subject_level/{pop}_subjects.bed',
        bim = 'final_qc_subject_level/{pop}_subjects.bim',
        fam = 'final_qc_subject_level/{pop}_subjects.fam',
        prune = 'pca/{pop}_ldPruneList.prune.in'
    params:
        inProj = 'final_qc_subject_level/{pop}_subjects',
        outProj = 'pca/{pop}_subjects_ld_prune'
    output:
        'pca/{pop}_subjects_ld_prune.bed',
        'pca/{pop}_subjects_ld_prune.bim',
        'pca/{pop}_subjects_ld_prune.fam'
    run:
        with open(input.fam) as f:
            line = f.readline()
        if line == 'Too few subjects to process pop\n':
            for x in output:
                with open(x, 'w') as out:
                    out.write('Too few subjects to process pop\n')
        else:
            shell('plink --bfile {params.inProj} --extract {input.prune} --make-bed --memory 10000 --out {params.outProj}')




rule plink_pca:
    input:
        bed = 'pca/{pop}_subjects_ld_prune.bed',
        bim = 'pca/{pop}_subjects_ld_prune.bim',
        fam = 'pca/{pop}_subjects_ld_prune.fam'
    params:
        inProj = 'pca/{pop}_subjects_ld_prune',
        outProj = 'pca/{pop}_subjects'
    output:
        'pca/{pop}_subjects.eigenvec'
    threads: 20
    run:
        with open(input.fam) as f:
            line = f.readline()
        if line == 'Too few subjects to process pop\n':
            with open(output[0], 'w') as out:
                out.write('Too few subjects to process pop\n')
        else:
            shell('plink --bfile {params.inProj} --pca --memory 240000 --threads {threads} --out {params.outProj}')

rule pca_csv:
    input:
        'pca/{pop}_subjects.eigenvec'
    output:
        'pca/{pop}_subjects.eigenvec.csv'
    run:
        SubjectToCaCoDict = makeSubjectToCaCoDict('IlluminaSampleSheet.csv')
        with open(input[0]) as f, open(output[0], 'w') as out:
            line = f.readline()
            if line == 'Too few subjects to process pop\n':
                out.write('Too few subjects to process pop\n')
            else:
                out.write('Subject_ID,CaCo')
                for i in range(1, 21):
                    out.write(',PC' + str(i))
                out.write('\n')
                while line != '':
                    line_list = line.split()
                    sub = line_list[1]
                    CaCo = SubjectToCaCoDict[sub]
                    if CaCo == 'NA':
                        CaCo = '2'
                    pcas = line_list[2:]
                    out.write(','.join([sub, CaCo] + pcas) + '\n')
                    line = f.readline()

rule plot_pca:
    input:
        'pca/{pop}_subjects.eigenvec.csv'
    output:
        png = 'pca/{pop}_subjects.{pc}.png',
        R = 'pca/{pop}_subjects.{pc}.R',
        Rout = 'pca/{pop}_subjects.{pc}.R.out'
    run:
        with open(input[0]) as f:
            line = f.readline()
        if line == 'Too few subjects to process pop\n':
            for x in output:
                with open(x, 'w') as out:
                    out.write('Too few subjects to process pop\n')
        else:
            (pc1, pc2) = wildcards.pc.split('_')
            rTxt = '''
            colors <- c(rgb(0, 0, 1, .3), rgb(1, 0, 0, .3), rgb(0, 1, 0, .3))
            data <- read.csv("''' + input[0] + '''")
            png("''' + output.png + '''")
            plot(data$''' + pc1 + ''', data$''' + pc2 + ''',
            pch = 20, col = colors[data$CaCo + 1],
            xlab = "''' + pc1 + '''", ylab = "''' + pc2 + '''",
            main = "''' + wildcards.pop + ''' ''' + pc1 + ''' vs ''' + pc2 + '''")
            legend("topright", inset=c(-.50,0), xpd=TRUE, legend = c("Cases", "Controls", "Unknown"), col = c("red", "blue", "green"), pch = 19)
            dev.off()
            '''
            with open(output.R, 'w')  as R:
                R.write(rTxt)
            shell('R --vanilla < {output.R} > {output.Rout}')
