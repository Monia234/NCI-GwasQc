#!/usr/bin/python

rule sample_qc_report:
    input:
        sampSheet = sample_sheet,
        imiss1 = 'sample_qc_stats/samples.imiss',
        imiss2 = 'plink_filter_call_rate_1/samples_filter1.imiss',
        imiss3 = 'plink_filter_call_rate_2/samples_filter2.imiss',
        sexcheck = 'plink_filter_call_rate_1/samples_filter1.sexcheck',
        freq = 'sample_qc_stats/samples.frq',
        hwe = 'sample_qc_stats/samples.hwe',
        contam = 'all_contam/contam.csv',
        ancestry = 'snpweights/samples.snpweights.csv',
        knownConcordance = 'concordance/KnownReplicates.csv',
        unknownRep = 'concordance/UnknownReplicates.csv',
        intensity = 'all_sample_idat_intensity/idat_intensity.csv'
    params:
        outHead = 'SR_Subject_ID,Count_of_SR_SubjectID,SR,Current_Subject_Status,Subject_Notes,LIMS_Individual_ID,Project,Sample_ID,Project-Sample ID,LIMSSample_ID,Sample_Status,IdatsInProjectDir,IdatIntensity,Expected_Sex,Predicted_Sex,SexMatch,ChrX_Inbreed_estimate,AFR,EUR,ASN,Ancestry,Contamination_Rate,Call_Rate_Initial,Call_Rate_1_filter,Call_Rate_1,Call_Rate_2_filter,Call_Rate_2,Low Call Rate,Contaminated,Sex Discordant,Expected Replicate Discordance,Unexpected Replicate,Count_of_QC_Issue,Identifiler_Needed',
        sampSheetHead = 'Sample_ID,SentrixBarcode_A,SentrixPosition_A,SR_Subject_ID,LIMS_Individual_ID,Project,Sample_ID,Project-Sample ID,LIMSSample_ID,Expected_Sex,Identifiler_Sex,Sample_Group',
        blankHead = 'SR,Current_Subject_Status,Subject_Notes,Sample_Status',
        limsHead = 'SR_Subject_ID,LIMS_Individual_ID,Sample ID,Project-Sample ID,Call Rate,Low Call Rate,Contaminated,Sex Discordant,Expected Replicate Discordance,Unexpected Replicate'
    output:
        allQc = 'all_sample_qc.csv',
        lims = outName + '_LimsUpload_' + sampSheetDate + '.csv',
        limsDirOut = lims_output_dir + '/' + outName + '_LimsUpload_' + sampSheetDate + '.csv'
    run:
        outHeadList = params.outHead.split(',')
        sampSheetHeadList = params.sampSheetHead.split(',')
        blankHeadList = params.blankHead.split(',')
        limsHeadList = params.limsHead.split(',')
        sampSheetDict = makeSampSheetDict(input.sampSheet, sampSheetHeadList)
        SrPos = None
        for i in range(len(sampSheetHeadList)):
            if sampSheetHeadList[i] == 'SR_Subject_ID':
                SrPos = i
        if SrPos == None:
            print('No SR_Subject_ID in sampSheetHead')
            sys.exit(1)
        SrCountDict = {}
        for samp in sampSheetDict.keys():
            valList = sampSheetDict[samp]
            SrId = valList[SrPos]
            if SrCountDict.get(SrId):
                SrCountDict[SrId] += 1
            else:
                SrCountDict[SrId] = 1
        sampToFoundIdatDict = {}
        for i in idats:
            chipId = os.path.basename(i)
            sampId = chipIdToSampDict[chipId]
            sampToFoundIdatDict[sampId] = 'YES'
        for i in noIdats:
            chipId = os.path.basename(i)
            sampId = chipIdToSampDict[chipId]
            sampToFoundIdatDict[sampId] = 'NO'
        crDict1 = makeCallRateDict(input.imiss1)
        crDict2 = makeCallRateDict(input.imiss2)
        crDict3 = makeCallRateDict(input.imiss3)
        sexDict = makeSexDict(input.sexcheck)
        contamDict = makeContamDict(input.contam)
        intensityDict = makeIdatIntensDict(input.intensity)
        ancestryDict = makeAncestryDict(input.ancestry)
        repDiscordantDict = makeRepDiscordantDict(input.knownConcordance)
        unexpectedRepDict = makeUnexpectedRepDict(input.unknownRep)
        with open(output.allQc, 'w') as out, open(output.lims, 'w') as limsOut:
            out.write(params.outHead + '\n')
            limsOut.write(params.limsHead + '\n')
            for samp in sampSheetDict.keys():
                sampFields = sampSheetDict[samp]
                sampsheetFieldDict = {}
                for h in blankHeadList:
                    sampsheetFieldDict[h] = ''
                for i in range(len(sampSheetHeadList)):
                    h = sampSheetHeadList[i]
                    x = sampFields[i]
                    sampsheetFieldDict[h] = x
                sampsheetFieldDict['Count_of_SR_SubjectID'] = SrCountDict[sampsheetFieldDict['SR_Subject_ID']]
                idatFound = sampToFoundIdatDict[samp]
                sampsheetFieldDict['IdatsInProjectDir'] = idatFound
                chipId = sampsheetFieldDict['SentrixBarcode_A'] + '_' + sampsheetFieldDict['SentrixPosition_A']
                if sampsheetFieldDict['Sample_Group'] == 'sVALD-001':
                    sampsheetFieldDict['Expected_Sex'] = sampsheetFieldDict['Identifiler_Sex']
                cgrId = samp.split('_')[0]
                if not crDict1.get(samp):
                    cr1 = 'NA'
                else:
                    cr1 = crDict1[samp]
                sampsheetFieldDict['Call_Rate_Initial'] = str(cr1)
                if not crDict2.get(samp):
                    filt1 = 'Y'
                    cr2 = 'NA'
                else:
                    filt1 = 'N'
                    cr2 = crDict2[samp]
                sampsheetFieldDict['Call_Rate_1'] = cr2
                sampsheetFieldDict['Call_Rate_1_filter'] = filt1
                if not crDict3.get(samp):
                    filt2 = 'Y'
                    cr3 = 'NA'
                else:
                    filt2 = 'N'
                    cr3 = crDict3[samp]
                sampsheetFieldDict['Call_Rate_2'] = cr3
                sampsheetFieldDict['Call_Rate_2_filter'] = filt2
                if not sexDict.get(samp):
                    (snpsex, inbreed) = ['U', 'NA']
                else:
                    (defSex, inbreed) = sexDict[samp]
                    if float(inbreed) < .5:
                        snpsex = 'F'
                    else:
                        snpsex = 'M'
                sampsheetFieldDict['Predicted_Sex'] = snpsex
                if snpsex == 'U' or expectedSex == 'U':
                    sexMatch = 'U'
                elif snpsex != expectedSex:
                    sexMatch = 'N'
                else:
                    sexMatch = 'Y'
                sampsheetFieldDict['SexMatch'] = sexMatch
                if not ancestryDict.get(samp):
                    (AFR, EUR, ASN, ancestry) = ['NA', 'NA', 'NA', 'NA']
                else:
                    (AFR, EUR, ASN, ancestry) = ancestryDict[samp]
                sampsheetFieldDict['AFR'] = AFR
                sampsheetFieldDict['EUR'] = EUR
                sampsheetFieldDict['ASN'] = ASN
                sampsheetFieldDict['Ancestry'] = ancestry
                if cr1 == 'NA' or cr2 == 'NA' or cr3 == 'NA':
                    lowCR = 'TRUE'
                else:
                    lowCR = 'FALSE'
                sampsheetFieldDict['Low Call Rate'] = lowCR
                if not contamDict.get(samp):
                    contam = 'NA'
                else:
                    contam = contamDict[samp]
                sampsheetFieldDict['Contamination_Rate'] = contam
                if contam != 'NA' and float(contam) > contam_threshold:
                    isContaminated = 'TRUE'
                else:
                    isContaminated = 'FALSE'
                sampsheetFieldDict['Contaminated'] = isContaminated
                if not intensityDict.get(samp):
                    intensity = 'NA'
                else:
                    intensity = intensityDict[samp]
                sampsheetFieldDict['IdatIntensity'] = intensity
                if sexMatch == 'U':
                    sexDiscordant = 'NA'
                elif sexMatch == 'N':
                    sexDiscordant = 'TRUE'
                else:
                    sexDiscordant = 'FALSE'
                sampsheetFieldDict['Sex Discordant'] = sexDiscordant
                if repDiscordantDict.get(samp):
                    expectedRepDisc = 'TRUE'
                else:
                    expectedRepDisc= 'FALSE'
                sampsheetFieldDict['Expected Replicate Discordance'] = expectedRepDisc
                if unexpectedRepDict.get(samp):
                    unexpectedRep = 'TRUE'
                else:
                    unexpectedRep = 'FALSE'
                sampsheetFieldDict['Unexpected Replicate'] = unexpectedRep
                sampsheetFieldDict['Call Rate'] = str(cr1)
                issueCount = 0
                for issue in [lowCR, isContaminated, sexDiscordant, expectedRepDisc, unexpectedRep]:
                    if issue == 'TRUE':
                        issueCount += 1
                sampsheetFieldDict['Count_of_QC_Issue'] = str(issueCount)
                if isContaminated == 'TRUE' or sexDiscordant == 'TRUE' or unexpectedRep == 'TRUE':
                    identifiler = 'TRUE'
                else:
                    identifiler = 'FALSE'
                sampsheetFieldDict['Identifiler_Needed'] = identifiler
                limsOutList = []
                for h in limsHeadList:
                    limsOutList.append(sampsheetFieldDict[h])
                limsOut.write(','.join(limsOutList) + '\n')
                qcOutList = []
                for h in outHeadList:
                    qcOutList.append(sampsheetFieldDict[h])
                out.write(','.join(qcOutList) + '\n')
        shell('cp {output.lims} {output.limsDirOut}')



rule summary_stats:
    input:
        'all_sample_qc.csv'
    output:
        'summary_stats.txt'
    run:
        R("""
        data <- read.csv("{input}")
        write("The pipeline is complete and the summary files can be found here:", file = "{output}")
        labDir <- paste(getwd(), "/files_for_lab", sep = "")
        write(paste(labDir, "\n\n", sep = ""), file = "{output}", append = T)
        numSamps <- dim(data)[1]
        noGTC <- data$Sample_ID[is.na(data$Call_Rate_Initial)]
        write(paste("Of the ", numSamps, " samples ", length(noGTC), " did not have gtc files:", sep = ""), file = "{output}", append = T)
        write(as.character(noGTC), file = "{output}", append = T)
        write("\nAre the idat files in the project directory?", file = "{output}", append = T)
        capture.output(table(data$IdatsInProjectDir), file = "{output}", append = T)
        write("\nInitial call rate:\n", file = "{output}", append = T)
        capture.output(summary(data$Call_Rate_Initial), file = "{output}", append = T)
        write("\nContamination Rate:\n", file = "{output}", append = T)
        capture.output(summary(data$Contamination_Rate), file = "{output}", append = T)
        write("\nidat intensity:\n", file = "{output}", append = T)                                                                                                    
        capture.output(summary(data$IdatIntensity), file = "{output}", append = T)
        write("\nFail contamination rate:", file = "{output}", append = T)
        capture.output(table(data$Contamination_Rate > .1, useNA = "ifany"), file = "{output}", append = T)
        """)

