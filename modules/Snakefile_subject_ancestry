#!/usr/bin/python

rule subject_ancestry_csv:
    input:
        ancestry = 'snpweights/samples.snpweights.csv',
        track = 'subject_level/SampleUsedforSubject.csv',
        subjects = 'final_qc_subject_level/{pop}_subjects.fam'
    output:
        'ancestry/{pop}_subjects.snpweights.csv'
    run:
        with open(input.subjects) as f:
            line = f.readline()
        if line == 'Too few subjects to process pop\n':
            with open(output[0], 'w') as out:
                out.write('Too few subjects to process pop\n')
        else:
            sampToSubDict = MakeSampToSubDict(input.track)
            subjectDict = {}
            with open(input.subjects) as f:
                for line in f:
                    sub = line.split()[1]
                    subjectDict[sub] = 1
            with open(input.ancestry) as f, open(output[0], 'w') as out:
                head = f.readline()
                out.write(head)
                line = f.readline()
                while line != '':
                    line_list = line.rstrip().split(',')
                    samp = line_list[0]
                    if sampToSubDict.get(samp):
                        sub = sampToSubDict[samp]
                        if subjectDict.get(sub):
                            line_list[0] = sub
                            out.write(','.join(line_list) + '\n')
                    line = f.readline()


rule combine_ancestry_csv:
    input:
        expand('ancestry/{pop}_subjects.snpweights.csv', pop = POPS)
    output:
        'ancestry/subjects.snpweights.csv'
    run:
        SubjectToCaCoDict = makeSubjectToCaCoDict('IlluminaSampleSheet.csv')
        with open(output[0], 'w') as out:
            out.write('ID,CaCo,SNPs,EV1,EV2,AFR,EUR,ASN,Ancestry\n')
            for x in input:
                with open(x) as f:
                    head = f.readline()
                    if head != 'Too few subjects to process pop\n':
                        line = f.readline()
                        while line != '':
                            line_list = line.split(',')
                            sub = line_list[0]
                            CaCo = SubjectToCaCoDict[sub]
                            if CaCo == 'NA':
                                CaCo = '2'
                            line_list[1] = CaCo
                            out.write(','.join(line_list))
                            line = f.readline()


rule ancestry_plot:
    input:
        'ancestry/subjects.snpweights.csv'
    output:
        png = 'ancestry/subjects.ancestry.png',
        R = 'ancestry/subjects.ancestry.R',
        Rout = 'ancestry/subjects.ancestry.R.out'
    run:
        rTxt = '''
        require(plotrix)
        colors <- c(rgb(0, 0, 1, .3), rgb(1, 0, 0, .3), rgb(0, 1, 0, .3))
        data <- read.csv("''' + input[0] + '''")
        data$total=data$EUR+data$AFR+data$ASN         # Need to account
        data$European=data$EUR/data$total             # for slight rounding
        data$African=data$AFR/data$total              # in the ancestry
        data$Asian=data$ASN/data$total
        data_p=data[c("European","Asian","African")]  # triax.plot to work
        png("''' + output.png + '''")
        triax.plot(data_p, pch=20, col.symbol = colors[data$CaCo + 1], cc.axes=T, show.grid=T)
        legend("topleft", legend = c("Cases", "Controls", "Unknown"), col = c("red", "blue", "green"), pch = 19)
        dev.off()
        '''
        with open(output.R, 'w')  as R:
            R.write(rTxt)
        shell('R --vanilla < {output.R} > {output.Rout}')


