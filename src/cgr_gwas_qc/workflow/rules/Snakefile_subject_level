# if multiple samples from the same subject the sample with the highest call rate will be kept
rule internal_controls:
    input:
        sampSheet=sample_sheet,
        fam="remove_qc_fail/samples.fam",
    output:
        "subject_level/internalControls.txt",
    run:
        controlDict = makeControlDict(sample_sheet)
        (SubToSampListDict, sampToSubIdDict) = makeSubjectToSampListDict(sample_sheet)
        with open(input.fam) as f, open(output[0], "w") as out:
            for line in f:
                samp = line.split()[1]
                sub = sampToSubIdDict[samp]
                if controlDict.get(sub):
                    out.write(samp + " " + samp + "\n")


rule expected_duplicates:
    input:
        sampSheet=sample_sheet,
        imiss4="remove_qc_fail/samples_remove_failures.imiss",
        repDisc="remove_qc_fail/ExpectedRepDiscordant.txt",
    output:
        remove="subject_level/expectedDupToRemove.txt",
        track="subject_level/SampleUsedforSubject.csv",
        rename="subject_level/renameSampToSub.txt",
    run:
        lowConcordDict = {}
        with open(input.repDisc) as f:
            for line in f:
                samp = line.split()[0]
                lowConcordDict[samp] = 1
        (SubToSampListDict, sampToSubIdDict) = makeSubjectToSampListDict(sample_sheet)
        crDict = makeCallRateDict(input.imiss4)
        controlDict = makeControlDict(sample_sheet)
        with open(output.remove, "w") as out1, open(output.track, "w") as out2, open(
            output.rename, "w"
        ) as out3:
            out2.write("Subject_ID,Sample_ID\n")
            for sub in SubToSampListDict.keys():
                if not controlDict.get(sub):
                    sampList = SubToSampListDict[sub]
                    crList = []
                    CrSampList = []
                    lowConcord = False
                    for s in sampList:
                        if lowConcordDict.get(s):
                            lowConcord = True
                        if crDict.get(s):
                            crList.append(crDict[s])
                            CrSampList.append(s)
                    if lowConcord == True:
                        out2.write(",".join([sub, "NA"]) + "\n")
                        for s in sampList:
                            out1.write(s + " " + s + "\n")
                    elif len(crList) > 0:
                        bestSamp = getBestSamp(CrSampList, crList)
                        out2.write(",".join([sub, bestSamp]) + "\n")
                        out3.write(" ".join([bestSamp, bestSamp, sub, sub]) + "\n")
                        CrSampList.remove(bestSamp)
                        for s in CrSampList:
                            out1.write(s + " " + s + "\n")
                    else:
                        out2.write(",".join([sub, "NA"]) + "\n")


rule combine_internal_dup:
    input:
        "subject_level/expectedDupToRemove.txt",
        "subject_level/internalControls.txt",
    output:
        "subject_level/sampsToRemove.txt",
    run:
        with open(output[0], "w") as out:
            for i in input:
                with open(i) as f:
                    for line in f:
                        out.write(line)


rule plink_make_subject_level:
    input:
        bed="remove_qc_fail/samples.bed",
        bim="remove_qc_fail/samples.bim",
        fam="remove_qc_fail/samples.fam",
        remove="subject_level/sampsToRemove.txt",
    params:
        inProj="remove_qc_fail/samples",
        outProj="subject_level/samples",
    output:
        "subject_level/samples.bed",
        "subject_level/samples.bim",
        "subject_level/samples.fam",
    shell:
        "plink --bfile {params.inProj} --remove {input.remove} --memory 10000 --make-bed --out {params.outProj}"


rule rename_samp_to_sub:
    input:
        bed="subject_level/samples.bed",
        bim="subject_level/samples.bim",
        fam="subject_level/samples.fam",
        rename="subject_level/renameSampToSub.txt",
    params:
        inProj="subject_level/samples",
        outProj="subject_level/subjects",
    output:
        "subject_level/subjects.bed",
        "subject_level/subjects.bim",
        "subject_level/subjects.fam",
    shell:
        "plink --bfile {params.inProj} --update-ids {input.rename} --memory 10000 --make-bed --out {params.outProj}"


rule qc_stats_subject:
    input:
        "subject_level/subjects.bed",
        "subject_level/subjects.bim",
        "subject_level/subjects.fam",
    params:
        inProj="subject_level/subjects",
        outProj="subject_level/subjects_qc",
    output:
        "subject_level/subjects_qc.imiss",
        "subject_level/subjects_qc.lmiss",
        "subject_level/subjects_qc.sexcheck",
        "subject_level/subjects_qc.frq",
        "subject_level/subjects_qc.hwe",
    shell:
        "plink --bfile {params.inProj} --freq --missing --hardy --het --check-sex --memory 10000 --out {params.outProj}"
