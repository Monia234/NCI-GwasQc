"""Identifies contaminated samples.

Uses allele intensities to identify samples that are likely mixes using ``verifyIDintensity``.
"""


rule gtc_to_adpc:
    """Converts a sample's GTC + BPM to a ADPC.BIN.

    This is the format required by ``verifyIDintensity``. The script also runs some sanity checks
    (intensities and normalized intensities > 0; genotypes one of {0, 1, 2, 3}) while processing
    each file.

    .. warning::
        This is a submission hot spot creating 1 job per sample.
    """
    input:
        gtc=getGtc,
        manifest=illumina_manifest_file,
    output:
        adpc="contam/{sample_id}.adpc.bin",
        txt="contam/{sample_id}.adpc.bin.numSnps.txt",
    shell:
        "python /DCEG/CGF/Bioinformatics/Production/Eric/scripts/gtc2adpc.py {input.gtc} {input.manifest} {output.adpc}"


rule make_abf_txt:
    """Calculates the population level allele frequencies from the 1KG project.

    ``verifyIDintensity`` requires population level allele frequencies for its model. Here we use
     a custom script to pull out the B allele frequencies (BAF) from the 1000 genomes project
     (1KG). To do this we take each marker from the manifest file (BPM) and pull out BAF in the
     1KG ``.vcf`` from the ``INFO`` column. The script allows pulling out allele frequencies for
     different super populations but defaults to ``AF`` which ignores super population.
    """
    input:
        manifest=illumina_manifest_file,
    params:
        pop=contam_pop,
    output:
        illumina_manifest_file[:-3] + contam_pop + ".abf.txt",
    shell:
        "python /DCEG/CGF/Bioinformatics/Production/Eric/scripts/bpm_to_1kg_contam_abf.py {input.manifest} {params.pop}"


rule contam_test_GSA_1000g:
    """Find contaminated samples using allele intensities.

    Uses ``verifyIDintensity`` to find samples with allele intensities that deviate from the
    population.

    .. warning::
        This is a submission hot spot creating 1 job per sample.

    .. todo::
        This version has the number of variants hardcoded where other versions pull this number
        into the config.

        Here we are running ``verifyIDintensity`` in single sample mode. This software also has a
        multi-sample mode which may be faster and give better estimates. The problem with
        multi-sample mode is that it only works when you have a "large" number of samples.
    """
    input:
        adpc="contam/{sample_id}.adpc.bin",
        abf=illumina_manifest_file[:-3] + contam_pop + ".abf.txt",
    params:
        software="/DCEG/CGF/Bioinformatics/Production/BZhu/verifyIDintensity/verifyIDintensity/verifyIDintensity",
        snps=numSNPs
    output:
        "one_samp_b_1000g_contam/{sample_id}.contam.out",
    shell:
        '{params.software} -m {params.snps} -n 1 -b {input.abf} -v -p -i {input.adpc} > {output}'

rule combine_contam_one_samp_b_1000g:
    """Aggregate sample contamination scores.

    Aggregates sample level contamination scores into a single file (each row is a sample). The
    script sets `%Mix` to `NA` if the intensity is below the threshold and the file is not in the
    `imiss3` file.
    """
    input:
        contam=expand(
            "one_samp_b_1000g_contam/{sample_id}.contam.out", sample_id=SAMPLE_IDS
        ),
        intens="all_sample_idat_intensity/idat_intensity.csv",
        imiss3="plink_filter_call_rate_2/samples_filter2.imiss",
    params:
        intensThresh=6000,
    output:
        "all_contam/contam.csv",
    run:
        crDict3 = makeCallRateDict(input.imiss3)
        intensDict = {}
        with open(input.intens) as f:
            head = f.readline()
            line = f.readline()
            while line != "":
                (samp, chipId, intensity) = line.rstrip().split(",")
                intensDict[samp] = float(intensity)
                line = f.readline()
        with open(output[0], "w") as out:
            out.write("ID,%Mix,LLK,LLK0\n")
            for i in input.contam:
                samp = os.path.basename(i).split(".")[0]
                intens = intensDict[samp]
                with open(i) as f:
                    head = f.readline()
                    while "%Mix" not in head and head != "":
                        head = f.readline()
                    if head == "":
                        print("strange file format: " + i)
                        sys.exit(1)
                    head = f.readline()
                    line = f.readline()
                    line_list = line.split()
                    line_list[0] = samp
                    if intens < params.intensThresh and not crDict3.get(samp):
                        line_list[1] = "NA"
                    out.write(",".join(line_list) + "\n")
