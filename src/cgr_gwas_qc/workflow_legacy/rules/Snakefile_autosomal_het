rule pop_autosomal_het:
    input:
        bed="split_by_pop/{pop}_subjects.bed",
        bim="split_by_pop/{pop}_subjects.bim",
        fam="split_by_pop/{pop}_subjects.fam",
    params:
        inProj="split_by_pop/{pop}_subjects",
        outProj="autosomal_heterozygosity/{pop}_subjects_qc",
    output:
        "autosomal_heterozygosity/{pop}_subjects_qc.het",
    run:
        with open(input.fam) as f:
            line = f.readline()
        if line == "Too few subjects to process pop\n":
            with open(output[0], "w") as out:
                out.write("Too few subjects to process pop\n")
        else:
            shell(
                "plink --bfile {params.inProj} --het --memory 10000 --out {params.outProj}"
            )


rule autosomal_het_fail_list:
    input:
        expand("autosomal_heterozygosity/{pop}_subjects_qc.het", pop=POPS),
    output:
        "autosomal_heterozygosity/subjects_het_fail.txt",
    run:
        with open(output[0], "w") as out:
            for i in input:
                with open(i) as f:
                    head = f.readline()
                    if head != "Too few subjects to process pop\n":
                        line = f.readline()
                        while line != "":
                            line_list = line.split()
                            sub = line_list[1]
                            F = float(line_list[-1])
                            if abs(F) > float(config["autosomal_het_thresh"]):
                                out.write(sub + " " + sub + "\n")
                            line = f.readline()


rule autosomal_het_fail_list_pop:
    input:
        "autosomal_heterozygosity/{pop}_subjects_qc.het",
    output:
        "autosomal_heterozygosity/{pop}_subjects_het_fail.txt",
    run:
        with open(input[0]) as f, open(output[0], "w") as out:
            head = f.readline()
            if head == "Too few subjects to process pop\n":
                out.write("Too few subjects to process pop\n")
            else:
                line = f.readline()
                while line != "":
                    line_list = line.split()
                    sub = line_list[1]
                    F = float(line_list[-1])
                    if abs(F) > float(config["autosomal_het_thresh"]):
                        out.write(sub + " " + sub + "\n")
                    line = f.readline()


rule het_csv:
    input:
        het="autosomal_heterozygosity/{pop}_subjects_qc.het",
        SampSheet=sample_sheet,
    output:
        "autosomal_heterozygosity/{pop}_subjects_qc.het.csv",
    run:
        SubjectToCaCoDict = makeSubjectToCaCoDict(sample_sheet)
        with open(input.het) as f, open(output[0], "w") as out:
            head = f.readline()
            if head == "Too few subjects to process pop\n":
                out.write("Too few subjects to process pop\n")
            else:
                head_list = head.split()
                out.write(",".join("Subject_ID,CaCo".split(",") + head_list[2:]) + "\n")
                line = f.readline()
                while line != "":
                    line_list = line.split()
                    sub = line_list[1]
                    CaCo = SubjectToCaCoDict[sub]
                    if CaCo == "NA":
                        CaCo = "2"
                    out.write(",".join([sub, CaCo] + line_list[2:]) + "\n")
                    line = f.readline()


rule plot_het:
    input:
        "autosomal_heterozygosity/{pop}_subjects_qc.het.csv",
    params:
        thresh=config["autosomal_het_thresh"],
    output:
        png="autosomal_heterozygosity/{pop}_subjects_qc.het.png",
        R="autosomal_heterozygosity/{pop}_subjects_qc.het.R",
        Rout="autosomal_heterozygosity/{pop}_subjects_qc.het.R.out",
    run:
        with open(input[0]) as f:
            line = f.readline()
        if line == "Too few subjects to process pop\n":
            for x in output:
                with open(x, "w") as out:
                    out.write("Too few subjects to process pop\n")
        else:
            rTxt = (
                '''
                            colors <- c(rgb(0, 0, 1, .3), rgb(1, 0, 0, .3), rgb(.75, .75, .75, .3), rgb(0, 1, 0, .3))
                            data <- read.csv("'''
                + input[0]
                + '''")
                            sortData <- data[with(data, order(data$F)), ]
                            png("'''
                + output.png
                + '''", 6.5, 6.5, "in", res = 300)
                            par(mar = c(5, 4, 4, 8) + 0.1)
                            plot(1:nrow(sortData), sortData$F,
                            pch = 20, col = colors[sortData$CaCo + 1],
                            xlab = "subjects sorted by F", ylab = "F",
                            main = "'''
                + wildcards.pop
                + """ Homozygosity F Coefficient")
                            abline(h = """
                + str(params.thresh)
                + """)
                            abline(h = -"""
                + str(params.thresh)
                + """)
                            legend("topright", inset=c(-.30,0), xpd=TRUE, legend = c("Cases", "Controls", "Unknown"), col = c("red", "blue", "green"), pch = 19)
                            par(mar = c(5, 4, 4, 2) + 0.1)
                            dev.off()
                            """
            )
            with open(output.R, "w") as R:
                R.write(rTxt)
            shell("R --vanilla < {output.R} > {output.Rout}")
